#!/bin/sh
# mount and populate pseudo-filesystems /sys, /proc, /dev and /dev/pts.
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc -o nodev,noexec,nosuid proc /proc
mount -t debugfs -o nodev,noexec,nosuid debugfs /sys/kernel/debug
mount -t devtmpfs dev /dev
# make modprobe etc. happy
mkdir -p /lib/modules/$(cut -d' ' -f3 </proc/version)
# enable framebuffer console blanking and power-down. 10 minutes is the
# default for blanking; provide another 5 minutes for the user to
# prevent power-down if necessary.
echo -en '\e[9;10]\e[14;5]' >/dev/tty0
setvesablank 3

getcmdarg() {
	id=$1
	# get a kernel argument from /proc/cmdline. not all of them end up on
	# init's environment.
	awk -v RS=' ' "/^$id=/{print}" /proc/cmdline | cut -d= -f2-
}
waitfordevice() {
	devspec=$1
	# wait for a device, if non-empty
	dev=$devspec
	if [ -n "$devspec" ]; then
		echo -n "Waiting for $devspec ... " >&2
		for countdown in 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1; do
			if echo $devspec | fgrep -q =; then
				dev=$(findfs $devspec)
			fi
			[ -e "$dev" ] && break
			echo -n "$countdown " >&2
			sleep 1
		done

		# try one last time
		if echo $devspec | fgrep -q =; then
			dev=$(findfs $devspec)
		fi
		if [ -e "$dev" ]; then
			echo "done" >&2
			echo "$dev"
		else
			echo "failed" >&2
		fi
	fi
}
checkandswitch() {
	dir=$1
	cmd=$2
	# check if init is usable. if not, drop to rescue shell to let the user
	# try and fix it.
	while ! mountpoint -q $dir || ! [ -x "$dir$cmd" ]; do
		echo FAIL >/sys/devices/platform/frontpanel/ascii
		if mountpoint -q $dir; then
			echo -n "$cmd not found on $dir. "
		else
			echo -n "$dir not mounted. "
		fi
		case "$bootfail" in
		reboot|retry)
			echo "rebooting."
			sleep 5
			reboot
			;;
		halt|poweroff|off)
			echo "power off."
			sleep 5
			poweroff
			;;
		rescue|shell|"")
			;;
		*)
			echo "attempting fallback to $bootfail."
			unpackinitrd $bootfail
			dir=/initrd
			cmd=/init
			# no infinite loop: if fallback fails, try next bootfail method,
			# generally the shell.
			bootfail=$(echo $bootfail | cut -d: -f3-)
			# root can be mounted eg. if root was found but /sbin/init was
			# missing. unmount it before it will be switch_root-ed out of
			# the way, while the mountpoint is still reachable.
			mountpoint -q /root && umount -frl /root
			continue
			;;
		esac

		echo "starting rescue shell."
		echo r.con >/sys/devices/platform/frontpanel/ascii
		setsid cttyhack ash
	done
	# init appears to be usable. try switching to it. if this fails, that's
	# a kernel panic, but we cannot really prevent it.
	echo boot >/sys/devices/platform/frontpanel/ascii
	umount -fl /sys/kernel/debug /sys /proc /dev
	exec switch_root $dir $cmd "$@"
}
unpackinitrd() {
	initrd=$1
	# finds and unpacks a gzipped cpio archive to /initrd
	if echo $initrd | fgrep -q :; then
		initrdroot=$(echo $initrd | cut -d: -f1)
		initrdroot=$(waitfordevice $initrdroot)
		initrd=/mnt$(echo $initrd | cut -d: -f2)
	else
		initrdroot=
		initrd=$(waitfordevice $initrd)
	fi
	# mount, unpack, unmount. note that /initrd has to be on a different
	# filesystem for switch_root to work, so we mount a tmpfs instance
	# there.
	[ -e "$initrdroot" ] && mount -o ro $initrdroot /mnt
	[ -e "$initrd" ] || echo "initrd" $initrd "not found"
	[ -e "$initrd" ] && mount -t tmpfs initrd /initrd &&
			(echo -n "unpacking $initrd ... ";
			 cd /initrd && gzip -cd $initrd | cpio -id)
	mountpoint -q /mnt && umount -frl /mnt
}

bootfail=$(getcmdarg bootfail)
# try only initrd boot if requested
initrd=$(getcmdarg initrd)
if [ -n "$initrd" ]; then
	unpackinitrd $initrd
	checkandswitch /initrd /init
fi
# else try to mount the correct root
root=$(getcmdarg root)
root=$(waitfordevice $root)
[ -n "$root" ] && mount $root /root
checkandswitch /root /sbin/init
